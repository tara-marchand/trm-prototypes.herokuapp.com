{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/public/scripts/contractors/app-src/AppView.js","contractors-app.js","app/public/scripts/contractors/app-src/Contractor.js","app/public/scripts/contractors/app-src/ContractorCollection.js","app/public/scripts/contractors/app-src/ContractorView.js","app/public/scripts/contractors/app-src/app.js"],"names":[],"mappings":"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","file":"contractors-app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar ContractorView = require('./ContractorView.js');\n\nvar AppView = Backbone.View.extend({\n    el: $('.contractors-view'),\n    events: {\n        'click .add-contractor': 'createContractor'\n    },\n    initialize: function() {\n        this.$list = this.$el.find('ul');\n        this.$input = this.$el.find('.new-contractor');\n        // by listening to when the collection changes, we can add new items in real time\n        this.listenTo(this.collection, 'add', this.addContractor);\n        this.listenTo(Backbone, 'loader', this.loaderToggle);\n        this.fetchContractors();\n    },\n    fetchContractors: function() {\n        this.loaderShow();\n        this.collection.fetch({ success: _.bind(this.loaderHide, this) });\n    },\n    syncContractors: function() {\n        this.loaderShow();\n        this.collection.sync({ success: _.bind(this.loaderHide, this) });\n    },\n    addContractor: function(contractor) {\n        var view = new ContractorView({ model: contractor });\n        this.$list.append(view.render().el);\n        contractor.save();\n    },\n    loaderToggle: function(showOrHide) {\n        if (showOrHide === 'show') {\n            this.$el.find('.spinner').removeClass('hidden');\n        } else if (showOrHide === 'hide'){\n            this.$el.find('.spinner').addClass('hidden');\n        }\n    },\n    loaderShow: function() {\n        this.loaderToggle('show');\n    },\n    loaderHide: function() {\n        this.loaderToggle('hide');\n    },\n    createContractor: function() {\n        if (!this.$input.val()) {\n            return;\n        }\n        // create a new location in Firebase and save the model data\n        // this will trigger the listenTo method above, and a new contractor view will be created as well\n        this.collection.create({ name: this.$input.val() });\n        this.$input.val('');\n    }\n});\n\nmodule.exports = AppView;\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar ContractorView = require('./ContractorView.js');\n\nvar AppView = Backbone.View.extend({\n    el: $('.contractors-view'),\n    events: {\n        'click .add-contractor': 'createContractor'\n    },\n    initialize: function() {\n        this.$list = this.$el.find('ul');\n        this.$input = this.$el.find('.new-contractor');\n        // by listening to when the collection changes, we can add new items in real time\n        this.listenTo(this.collection, 'add', this.addContractor);\n        this.listenTo(Backbone, 'loader', this.loaderToggle);\n        this.fetchContractors();\n    },\n    fetchContractors: function() {\n        this.loaderShow();\n        this.collection.fetch({ success: _.bind(this.loaderHide, this) });\n    },\n    syncContractors: function() {\n        this.loaderShow();\n        this.collection.sync({ success: _.bind(this.loaderHide, this) });\n    },\n    addContractor: function(contractor) {\n        var view = new ContractorView({ model: contractor });\n        this.$list.append(view.render().el);\n        contractor.save();\n    },\n    loaderToggle: function(showOrHide) {\n        if (showOrHide === 'show') {\n            this.$el.find('.spinner').removeClass('hidden');\n        } else if (showOrHide === 'hide'){\n            this.$el.find('.spinner').addClass('hidden');\n        }\n    },\n    loaderShow: function() {\n        this.loaderToggle('show');\n    },\n    loaderHide: function() {\n        this.loaderToggle('hide');\n    },\n    createContractor: function() {\n        if (!this.$input.val()) {\n            return;\n        }\n        // create a new location in Firebase and save the model data\n        // this will trigger the listenTo method above, and a new contractor view will be created as well\n        this.collection.create({ name: this.$input.val() });\n        this.$input.val('');\n    }\n});\n\nmodule.exports = AppView;\n\n},{\"./ContractorView.js\":4}],2:[function(require,module,exports){\n'use strict';\n\nvar Contractor = Backbone.Model.extend({\n    defaults: {\n        name: 'New Contractor',\n        url: ''\n    }\n});\n\nmodule.exports = Contractor;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar Contractor = require('./Contractor.js');\n\n// create a Firebase collection and set the 'url' property to the URL of our Firebase app\nmodule.exports = Backbone.Firebase.Collection.extend({\n    url: \"https://tmarchand-contractors.firebaseio.com/contractors\",\n    model: Contractor,\n    autoSync: false\n});\n\n},{\"./Contractor.js\":2}],4:[function(require,module,exports){\n'use strict';\n\nvar Contractor = require('./Contractor.js');\n\nvar ContractorView = Backbone.View.extend({\n    events: {\n        'click a': 'toggleEdit',\n        'click .delete': 'delete',\n        'click .cancel': 'cancel',\n        'click .save': 'save'\n    },\n\n    // id: 'contractor-' + Contractor.id,\n    model: Contractor,\n    tagName: 'li',\n    template: _.template($('.contractor-view').html()),\n    isBeingEdited: false,\n\n    initialize: function() {\n        this.listenTo(this.model, 'change', this.render);\n        // this.model.bind('remove', this.remove, this);\n        this.model.bind('remove', () => this.remove());\n    },\n\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n    },\n\n    toggleEdit: function(e) {\n        e.preventDefault();\n        this.isBeingEdited = !this.isBeingEdited;\n        this.$el.find('.edit-fields').toggleClass('hidden', !this.isBeingEdited);\n    },\n\n    delete: function() {\n        this.model.destroy();\n        this.$el.remove();\n    },\n\n    cancel: function () {\n        this.$el.find('.edit-fields').addClass('hidden');\n    },\n\n    showLoader: function() {\n        Backbone.trigger('loader', 'show');\n    },\n\n    hideLoader() {\n        Backbone.trigger('loader', 'hide');\n    },\n\n    save: function(e) {\n        e.preventDefault();\n\n        this.showLoader();\n\n        var modelToSave ={};\n        var names = ['name', 'url'];\n        var $input = null;\n        var key = '';\n        var value = '';\n\n        for (var i = names.length - 1; i >= 0; i--) {\n            $input = this.$el.find('[name=\"' + names[i] + '\"]');\n            key = $input.attr('name');\n            value = $input.val();\n            modelToSave[key] = value;\n        }\n\n        this.model.set(modelToSave);\n        this.model.save(modelToSave, { success: () => this.hideLoader() });\n    }\n});\n\nmodule.exports = ContractorView;\n\n},{\"./Contractor.js\":2}],5:[function(require,module,exports){\n'use strict';\n\nvar ContractorCollection = require('./ContractorCollection.js');\nvar AppView = require('./AppView.js');\n\nmodule.exports = (function() {\n    var Contractors = {};\n\n    Contractors.contractorCollection = new ContractorCollection();\n    Contractors.appView = new AppView({ collection: Contractors.contractorCollection });\n})();\n\n},{\"./AppView.js\":1,\"./ContractorCollection.js\":3}]},{},[5])\n\n","'use strict';\n\nvar Contractor = Backbone.Model.extend({\n    defaults: {\n        name: 'New Contractor',\n        url: ''\n    }\n});\n\nmodule.exports = Contractor;\n","'use strict';\n\nvar Contractor = require('./Contractor.js');\n\n// create a Firebase collection and set the 'url' property to the URL of our Firebase app\nmodule.exports = Backbone.Firebase.Collection.extend({\n    url: \"https://tmarchand-contractors.firebaseio.com/contractors\",\n    model: Contractor,\n    autoSync: false\n});\n","'use strict';\n\nvar Contractor = require('./Contractor.js');\n\nvar ContractorView = Backbone.View.extend({\n    events: {\n        'click a': 'toggleEdit',\n        'click .delete': 'delete',\n        'click .cancel': 'cancel',\n        'click .save': 'save'\n    },\n\n    // id: 'contractor-' + Contractor.id,\n    model: Contractor,\n    tagName: 'li',\n    template: _.template($('.contractor-view').html()),\n    isBeingEdited: false,\n\n    initialize: function() {\n        this.listenTo(this.model, 'change', this.render);\n        // this.model.bind('remove', this.remove, this);\n        this.model.bind('remove', () => this.remove());\n    },\n\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n    },\n\n    toggleEdit: function(e) {\n        e.preventDefault();\n        this.isBeingEdited = !this.isBeingEdited;\n        this.$el.find('.edit-fields').toggleClass('hidden', !this.isBeingEdited);\n    },\n\n    delete: function() {\n        this.model.destroy();\n        this.$el.remove();\n    },\n\n    cancel: function () {\n        this.$el.find('.edit-fields').addClass('hidden');\n    },\n\n    showLoader: function() {\n        Backbone.trigger('loader', 'show');\n    },\n\n    hideLoader() {\n        Backbone.trigger('loader', 'hide');\n    },\n\n    save: function(e) {\n        e.preventDefault();\n\n        this.showLoader();\n\n        var modelToSave ={};\n        var names = ['name', 'url'];\n        var $input = null;\n        var key = '';\n        var value = '';\n\n        for (var i = names.length - 1; i >= 0; i--) {\n            $input = this.$el.find('[name=\"' + names[i] + '\"]');\n            key = $input.attr('name');\n            value = $input.val();\n            modelToSave[key] = value;\n        }\n\n        this.model.set(modelToSave);\n        this.model.save(modelToSave, { success: () => this.hideLoader() });\n    }\n});\n\nmodule.exports = ContractorView;\n","'use strict';\n\nvar ContractorCollection = require('./ContractorCollection.js');\nvar AppView = require('./AppView.js');\n\nmodule.exports = (function() {\n    var Contractors = {};\n\n    Contractors.contractorCollection = new ContractorCollection();\n    Contractors.appView = new AppView({ collection: Contractors.contractorCollection });\n})();\n"],"sourceRoot":"/source/"}