{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/public/scripts/contractors/app-src/AppView.js","contractors-app.js","app/public/scripts/contractors/app-src/Contractor.js","app/public/scripts/contractors/app-src/ContractorCollection.js","app/public/scripts/contractors/app-src/ContractorView.js","app/public/scripts/contractors/app-src/app.js"],"names":[],"mappings":"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","file":"contractors-app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar ContractorView = require('./ContractorView.js');\n\nvar AppView = Backbone.View.extend({\n    el: $('.contractors-view'),\n    events: {\n        'click .add-contractor': 'createContractor'\n    },\n    initialize: function() {\n        this.$list = this.$el.find('ul');\n        this.$input = this.$el.find('.new-contractor');\n        // by listening to when the collection changes, we can add new items in real time\n        this.listenTo(this.collection, 'add', this.addContractor);\n        this.listenTo(Backbone, 'loader', this.loaderToggle);\n        this.fetchContractors();\n    },\n    fetchContractors: function() {\n        this.loaderShow();\n        this.collection.fetch({ success: _.bind(this.loaderHide, this) });\n    },\n    syncContractors: function() {\n        this.loaderShow();\n        this.collection.sync({ success: _.bind(this.loaderHide, this) });\n    },\n    addContractor: function(contractor) {\n        var view = new ContractorView({ model: contractor });\n        this.$list.append(view.render().el);\n        contractor.save();\n    },\n    loaderToggle: function(showOrHide) {\n        if (showOrHide === 'show') {\n            this.$el.find('.spinner').removeClass('hidden');\n        } else if (showOrHide === 'hide'){\n            this.$el.find('.spinner').addClass('hidden');\n        }\n    },\n    loaderShow: function() {\n        this.loaderToggle('show');\n    },\n    loaderHide: function() {\n        this.loaderToggle('hide');\n    },\n    createContractor: function() {\n        if (!this.$input.val()) {\n            return;\n        }\n        // create a new location in Firebase and save the model data\n        // this will trigger the listenTo method above, and a new contractor view will be created as well\n        this.collection.create({ name: this.$input.val() });\n        this.$input.val('');\n    }\n});\n\nmodule.exports = AppView;\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar ContractorView = require('./ContractorView.js');\n\nvar AppView = Backbone.View.extend({\n    el: $('.contractors-view'),\n    events: {\n        'click .add-contractor': 'createContractor'\n    },\n    initialize: function() {\n        this.$list = this.$el.find('ul');\n        this.$input = this.$el.find('.new-contractor');\n        // by listening to when the collection changes, we can add new items in real time\n        this.listenTo(this.collection, 'add', this.addContractor);\n        this.listenTo(Backbone, 'loader', this.loaderToggle);\n        this.fetchContractors();\n    },\n    fetchContractors: function() {\n        this.loaderShow();\n        this.collection.fetch({ success: _.bind(this.loaderHide, this) });\n    },\n    syncContractors: function() {\n        this.loaderShow();\n        this.collection.sync({ success: _.bind(this.loaderHide, this) });\n    },\n    addContractor: function(contractor) {\n        var view = new ContractorView({ model: contractor });\n        this.$list.append(view.render().el);\n        contractor.save();\n    },\n    loaderToggle: function(showOrHide) {\n        if (showOrHide === 'show') {\n            this.$el.find('.spinner').removeClass('hidden');\n        } else if (showOrHide === 'hide'){\n            this.$el.find('.spinner').addClass('hidden');\n        }\n    },\n    loaderShow: function() {\n        this.loaderToggle('show');\n    },\n    loaderHide: function() {\n        this.loaderToggle('hide');\n    },\n    createContractor: function() {\n        if (!this.$input.val()) {\n            return;\n        }\n        // create a new location in Firebase and save the model data\n        // this will trigger the listenTo method above, and a new contractor view will be created as well\n        this.collection.create({ name: this.$input.val() });\n        this.$input.val('');\n    }\n});\n\nmodule.exports = AppView;\n\n},{\"./ContractorView.js\":4}],2:[function(require,module,exports){\n'use strict';\n\nvar Contractor = Backbone.Model.extend({\n    defaults: {\n        name: 'New Contractor',\n        url: ''\n    }\n});\n\nmodule.exports = Contractor;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar Contractor = require('./Contractor.js');\n\n// create a Firebase collection and set the 'url' property to the URL of our Firebase app\nmodule.exports = Backbone.Firebase.Collection.extend({\n    url: 'https://tmarchand-contractors.firebaseio.com/contractors',\n    model: Contractor,\n    autoSync: false\n});\n\n},{\"./Contractor.js\":2}],4:[function(require,module,exports){\n'use strict';\n\nvar Contractor = require('./Contractor.js');\n\nvar ContractorView = Backbone.View.extend({\n    events: {\n        'click a': 'toggleEdit',\n        'click .delete': 'delete',\n        'click .cancel': 'cancel',\n        'click .save': 'save'\n    },\n\n    // id: 'contractor-' + Contractor.id,\n    model: Contractor,\n    tagName: 'li',\n    template: _.template($('.contractor-view').html()),\n    isBeingEdited: false,\n\n    initialize: function() {\n        this.listenTo(this.model, 'change', this.render);\n        // this.model.bind('remove', this.remove, this);\n        this.model.bind('remove', () => this.remove());\n    },\n\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n    },\n\n    toggleEdit: function(e) {\n        e.preventDefault();\n        this.isBeingEdited = !this.isBeingEdited;\n        this.$el.find('.edit-fields').toggleClass('hidden', !this.isBeingEdited);\n    },\n\n    delete: function() {\n        this.model.destroy();\n        this.$el.remove();\n    },\n\n    cancel: function () {\n        this.$el.find('.edit-fields').addClass('hidden');\n    },\n\n    showLoader: function() {\n        Backbone.trigger('loader', 'show');\n    },\n\n    hideLoader() {\n        Backbone.trigger('loader', 'hide');\n    },\n\n    save: function(e) {\n        e.preventDefault();\n\n        this.showLoader();\n\n        var modelToSave ={};\n        var names = ['name', 'url'];\n        var $input = null;\n        var key = '';\n        var value = '';\n\n        for (var i = names.length - 1; i >= 0; i--) {\n            $input = this.$el.find('[name=\"' + names[i] + '\"]');\n            key = $input.attr('name');\n            value = $input.val();\n            modelToSave[key] = value;\n        }\n\n        this.model.set(modelToSave);\n        this.model.save(modelToSave, { success: () => this.hideLoader() });\n    }\n});\n\nmodule.exports = ContractorView;\n\n},{\"./Contractor.js\":2}],5:[function(require,module,exports){\n'use strict';\n\nvar ContractorCollection = require('./ContractorCollection.js');\nvar AppView = require('./AppView.js');\n\nmodule.exports = (function() {\n    var Contractors = {};\n\n    Contractors.contractorCollection = new ContractorCollection();\n    Contractors.appView = new AppView({ collection: Contractors.contractorCollection });\n})();\n\n},{\"./AppView.js\":1,\"./ContractorCollection.js\":3}]},{},[5])\n\n","'use strict';\n\nvar Contractor = Backbone.Model.extend({\n    defaults: {\n        name: 'New Contractor',\n        url: ''\n    }\n});\n\nmodule.exports = Contractor;\n","'use strict';\n\nvar Contractor = require('./Contractor.js');\n\n// create a Firebase collection and set the 'url' property to the URL of our Firebase app\nmodule.exports = Backbone.Firebase.Collection.extend({\n    url: 'https://tmarchand-contractors.firebaseio.com/contractors',\n    model: Contractor,\n    autoSync: false\n});\n","'use strict';\n\nvar Contractor = require('./Contractor.js');\n\nvar ContractorView = Backbone.View.extend({\n    events: {\n        'click a': 'toggleEdit',\n        'click .delete': 'delete',\n        'click .cancel': 'cancel',\n        'click .save': 'save'\n    },\n\n    // id: 'contractor-' + Contractor.id,\n    model: Contractor,\n    tagName: 'li',\n    template: _.template($('.contractor-view').html()),\n    isBeingEdited: false,\n\n    initialize: function() {\n        this.listenTo(this.model, 'change', this.render);\n        // this.model.bind('remove', this.remove, this);\n        this.model.bind('remove', () => this.remove());\n    },\n\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n    },\n\n    toggleEdit: function(e) {\n        e.preventDefault();\n        this.isBeingEdited = !this.isBeingEdited;\n        this.$el.find('.edit-fields').toggleClass('hidden', !this.isBeingEdited);\n    },\n\n    delete: function() {\n        this.model.destroy();\n        this.$el.remove();\n    },\n\n    cancel: function () {\n        this.$el.find('.edit-fields').addClass('hidden');\n    },\n\n    showLoader: function() {\n        Backbone.trigger('loader', 'show');\n    },\n\n    hideLoader() {\n        Backbone.trigger('loader', 'hide');\n    },\n\n    save: function(e) {\n        e.preventDefault();\n\n        this.showLoader();\n\n        var modelToSave ={};\n        var names = ['name', 'url'];\n        var $input = null;\n        var key = '';\n        var value = '';\n\n        for (var i = names.length - 1; i >= 0; i--) {\n            $input = this.$el.find('[name=\"' + names[i] + '\"]');\n            key = $input.attr('name');\n            value = $input.val();\n            modelToSave[key] = value;\n        }\n\n        this.model.set(modelToSave);\n        this.model.save(modelToSave, { success: () => this.hideLoader() });\n    }\n});\n\nmodule.exports = ContractorView;\n","'use strict';\n\nvar ContractorCollection = require('./ContractorCollection.js');\nvar AppView = require('./AppView.js');\n\nmodule.exports = (function() {\n    var Contractors = {};\n\n    Contractors.contractorCollection = new ContractorCollection();\n    Contractors.appView = new AppView({ collection: Contractors.contractorCollection });\n})();\n"],"sourceRoot":"/source/"}